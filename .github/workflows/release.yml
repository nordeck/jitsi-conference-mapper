name: Release

on: [ workflow_dispatch ]

jobs:
  perform_release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PACKAGE_TOKEN }}
          ref: main

      - name: Initialize mandatory git config
        run: |
          git config user.name "GitHub Actions"
          git config user.email noreply@github.com

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: maven

      - name: Set release version
        run: |
          mvn --batch-mode build-helper:parse-version versions:set -DgenerateBackupPoms=false -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.0
          echo "RELEASE_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV

      - name: Parse release version
        uses: jungwinter/split@v2
        id: split
        with:
          msg: ${{ env.RELEASE_VERSION }}
          separator: '.'

      - name: Create release branch
        run: |
          git checkout -b release/${{ steps.split.outputs._0 }}.${{ steps.split.outputs._1 }}
          git add pom.xml
          git commit -m "[release] ${{ env.RELEASE_VERSION }}"
          git push --set-upstream origin release/${{ steps.split.outputs._0 }}.${{ steps.split.outputs._1 }}

      - name: Create release tag
        run: |
          git tag ${{ env.RELEASE_VERSION }}
          git push origin ${{ env.RELEASE_VERSION }}

      - name: Set development version
        run: |
          git checkout main
          git pull
          mvn --batch-mode build-helper:parse-version versions:set -DgenerateBackupPoms=false -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.nextMinorVersion}.0-SNAPSHOT
          echo "DEV_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV

      - name: Create branch for new version number
        run: |
          git checkout -b nic/feat/version_update_${{ env.DEV_VERSION }}
          git add pom.xml
          git commit -m "Version update to ${{ env.DEV_VERSION }}"
          git push --set-upstream origin nic/feat/version_update_${{ env.DEV_VERSION }}

      - name: Create pull request
        uses: peter-evans/create-pull-request@v4
        with:
          token: ${{ secrets.PACKAGE_TOKEN }}
          branch: nic/feat/version_update_${{ env.DEV_VERSION }}
          delete-branch: true
          base: main
          title: Version update to ${{ env.DEV_VERSION }}

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          release_name: Release ${{ env.RELEASE_VERSION }}
          draft: false
          prerelease: false



